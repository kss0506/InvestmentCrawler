import asyncio
import logging
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from bs4 import BeautifulSoup
from chromedriver_py import binary_path

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[logging.StreamHandler(), logging.FileHandler("test_debug.log")])
logger = logging.getLogger(__name__)

options = Options()
options.binary_location = "/usr/bin/chromium"
options.add_argument("--headless")
options.add_argument("--no-sandbox")
options.add_argument("--disable-dev-shm-usage")
options.add_argument("--lang=ko-KR")
options.add_argument("user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36")

service = Service(executable_path=binary_path)
driver = webdriver.Chrome(service=service, options=options)

async def get_zum_briefing(ticker):
    url = f"https://invest.zum.com/etf/{ticker}/"
    driver.get(url)
    WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.TAG_NAME, "body")))
    html_content = driver.page_source
    soup = BeautifulSoup(html_content, "html.parser")
    with open(f"test_{ticker}.html", "w", encoding="utf-8") as f:
        f.write(html_content)
    briefing_section = None
    for element in soup.find_all('h4', string=lambda text: text and "데일리 브리핑" in text):
        briefing_section = element.find_parent('div')
        break
    if not briefing_section:
        alt_briefing = soup.find("div", class_="styles_briefingInner__8_73I") or soup.find("div", string=lambda text: text and ("2025" in text or "%" in text))
        briefing = alt_briefing.text.strip() if alt_briefing else None
    else:
        briefing = ""
        paragraphs = briefing_section.find_all('p', recursive=False)
        if paragraphs:
            for i, p in enumerate(paragraphs, 1):
                briefing += f"\n{i}. {p.get_text(strip=True)}"
        else:
            briefing = briefing_section.text.strip()
    return f"{ticker}:\n{briefing}" if briefing else f"{ticker}: 브리핑 없음"

async def test_single_ticker():
    ticker = "IYY"
    result = await get_zum_briefing(ticker)
    print(result)

if __name__ == "__main__":
    try:
        asyncio.run(test_single_ticker())
    finally:
        driver.quit()